apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ STATEFULSET_NAME }}
spec:
  selector:
    matchLabels:
      name: {{ LABEL_NAME }}
  serviceName: {{ SERVICE_NAME }}
  template:
    metadata:
      labels:
       name: {{ LABEL_NAME }}
    spec:
      initContainers:
        - name: create-config
          image: {{ IMAGE_NAME }}:{{ IMAGE_TAG }}
          command:
            - bash
            - "-c"
            - |
              set -ex;
              mkdir -p {{ DATABASE_LOG_DIR }};
              chown -R mongodb:mongodb {{ DATABASE_LOG_DIR }};
              {{ INIT_CONTAINER_CREATE_CONFIG_COMMANDS }}
          volumeMounts:
            - name: {{ VOLUME_NAME }}
              mountPath: {{ VOLUME_PATH_ROOT }}
            - name: {{ VOLUME_NAME }}
              mountPath: {{ VOLUME_PATH_DB }}
              subPath: {{ VOLUME_SUBPATH_DB|default("db", true) }}
            - name: {{ VOLUME_NAME }}
              mountPath: {{ VOLUME_PATH_CONFIGDB }}
              subPath: {{ VOLUME_SUBPATH_CONFIGDB|default("configdb", true) }}
            - name: mongodb-config-map
              mountPath: {{ CONFIG_MAP_MOUNT_PATH }}
      containers:
        - name: {{ CONTAINER_NAME|default("dbaas-container", true) }}
          image: {{ IMAGE_NAME }}:{{ IMAGE_TAG }}
          args:
            - "--config"
            - "{{ DATABASE_CONFIG_FULL_PATH }}"
          ports:
            - containerPort: {{ CONTAINER_PORT }}
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: {{ INIT_USER }}
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: {{ INIT_PASSWORD }}
            - name: MONGODB_ADMINDBAAS_USER
              value: admindbaas
            - name: MONGODB_ADMINDBAAS_PASSWORD
              value: a
            - name: MONGODB_BACKUP_USER
              value: backup
            - name: MONGODB_BACKUP_PASSWORD
              value: a
            - name: MONGODB_DB_ARQ_USER
              value: db_arq
            - name: MONGODB_DB_ARQ_PASSWORD
              value: a
            - name: MONGODB_ZABBIX_USER
              value: usr_zabbix
            - name: MONGODB_ZABBIX__PASSWORD
              value: a
            - name: MONGODB_TELEGRAF_USER
              value: usr_telegraf
            - name: MONGODB_TELEGRAF_PASSWORD
              value: a
          volumeMounts:
            - name: {{ VOLUME_NAME }}
              mountPath: {{ VOLUME_PATH_ROOT }}
            - name: {{ VOLUME_NAME }}
              mountPath: {{ VOLUME_PATH_DB }}
              subPath: {{ VOLUME_SUBPATH_DB|default("db", true) }}
            - name: {{ VOLUME_NAME }}
              mountPath: {{ VOLUME_PATH_CONFIGDB }}
              subPath: {{ VOLUME_SUBPATH_CONFIGDB|default("configdb", true) }}
            - name: mongodb-config-map
              mountPath: {{ CONFIG_MAP_MOUNT_PATH }}
          resources:
            requests:
              cpu: {{ CPU }}m
              memory: {{ MEMORY }}Mi
            limits:
              cpu: {{ CPU_LIMIT }}m
              memory: {{  MEMORY_LIMIT }}Mi
          lifecycle:
            postStart:
              exec:
                command:
                - bash
                - "-c"
                - |
                  if [ ! -f /data/create_user_script.lock ]; then

                    touch /data/create_user_script.lock

                    sleep 60

                    echo "mongo admin -u${MONGO_INITDB_ROOT_USERNAME} -p${MONGO_INITDB_ROOT_PASSWORD}<< EOF" > /data/create_user_script.sh
                    echo "db.createUser({" >> /data/create_user_script.sh
                    echo "'user' : '${MONGODB_ADMINDBAAS_USER}'," >> /data/create_user_script.sh
                    echo "'pwd' : '${MONGODB_ADMINDBAAS_PASSWORD}'," >> /data/create_user_script.sh
                    echo "'roles' : ['userAdminAnyDatabase', 'clusterAdmin', 'readWriteAnyDatabase', 'dbAdminAnyDatabase']" >> /data/create_user_script.sh
                    echo "})" >> /data/create_user_script.sh

                    echo "db.createUser({" >> /data/create_user_script.sh
                    echo "    'user' : '${MONGODB_BACKUP_USER}'," >> /data/create_user_script.sh
                    echo "    'pwd' : '${MONGODB_BACKUP_PASSWORD}'," >> /data/create_user_script.sh
                    echo "    'roles' : ['userAdminAnyDatabase', 'clusterAdmin', 'readWriteAnyDatabase', 'dbAdminAnyDatabase']" >> /data/create_user_script.sh
                    echo "})" >> /data/create_user_script.sh

                    echo "db.createUser({" >> /data/create_user_script.sh
                    echo "    'user' : '${MONGODB_DB_ARQ_USER}'," >> /data/create_user_script.sh
                    echo "    'pwd' : '${MONGODB_DB_ARQ_PASSWORD}'," >> /data/create_user_script.sh
                    echo "    'roles' : ['readAnyDatabase', 'clusterMonitor']" >> /data/create_user_script.sh
                    echo "})" >> /data/create_user_script.sh

                    echo "db.createUser({" >> /data/create_user_script.sh
                    echo "    'user' : '${MONGODB_ZABBIX_USER}'," >> /data/create_user_script.sh
                    echo "    'pwd' : '${MONGODB_ZABBIX__PASSWORD}'," >> /data/create_user_script.sh
                    echo "    'roles' : ['readAnyDatabase', 'clusterMonitor']" >> /data/create_user_script.sh
                    echo "})" >> /data/create_user_script.sh

                    echo "db.createUser({" >> /data/create_user_script.sh
                    echo "    'user' : '${MONGODB_TELEGRAF_USER}'," >> /data/create_user_script.sh
                    echo "    'pwd' : '${MONGODB_TELEGRAF_PASSWORD}'," >> /data/create_user_script.sh
                    echo "    'roles' : ['clusterMonitor']" >> /data/create_user_script.sh
                    echo "})" >> /data/create_user_script.sh

                    echo "db.createRole({" >> /data/create_user_script.sh
                    echo "    role: 'dbEvalUser'," >> /data/create_user_script.sh
                    echo "    privileges: [{" >> /data/create_user_script.sh
                    echo "        resource: { anyResource: true }," >> /data/create_user_script.sh
                    echo "        actions: [ 'anyAction' ]}]," >> /data/create_user_script.sh
                    echo "    roles: []" >> /data/create_user_script.sh
                    echo "})" >> /data/create_user_script.sh

                    echo "db.grantRolesToUser('${MONGODB_ADMINDBAAS_USER}', [ { role: 'dbEvalUser', db: 'admin' } ])" >> /data/create_user_script.sh

                    echo "exit" >> /data/create_user_script.sh

                    echo "EOF" >> /data/create_user_script.sh

                    chmod u+x /data/create_user_script.sh

                    /data/create_user_script.sh > /data/create_user_script.log
                    rm /data/create_user_script.sh

                  fi
        - name: database-log
          image: busybox
          args: [/bin/sh, -c, 'tail -n+1 -f {{ DATABASE_LOG_FULL_PATH }}']
          volumeMounts:
            - name: {{ VOLUME_NAME }}
              mountPath: {{ VOLUME_PATH_ROOT }}
      volumes:
        - name: {{ VOLUME_NAME }}
          persistentVolumeClaim:
            claimName: {{ VOLUME_CLAIM_NAME }}
        - name: mongodb-config-map
          configMap:
            name: {{ CONFIG_MAP_NAME }}
